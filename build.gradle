plugins {
    id "net.ltgt.apt" version "0.10"
}

apply plugin: 'java'

version = '3.5.3'
sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
    main {
        java { srcDirs "src", "ext/rocksaw/src", "ext/vserv-tcpip/src/java" }
        resources { srcDirs "config", "src", "resources" }
    }
    test {
        java { srcDir "test" }
        resources { srcDir "test" }
    }
}

repositories {
    jcenter()
}

dependencies {
    compile 'com.google.dagger:dagger:2.19'
    compileOnly files('lib/swt-win32.jar')
    compileOnly files('lib/jna.jar')
    apt 'com.google.dagger:dagger-compiler:2.19'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.23.0'
}

def packageTask(def platform, def moreJars, def moreLibs) {
    return tasks.create(platform, Jar) {
        manifest {
           attributes 'Implementation-Title': 'Angry IP Scanner',
               'Implementation-Version': version,
               'Main-Class': 'net.azib.ipscan.Main',
               'Class-Path': '.',
               'Title': 'Angry IP Scanner',
               'Version': version,
               'Build-Date': java.time.LocalDate.now().toString(),
               'URL': 'https://angryip.org/'
       }
       baseName = project.name + '-' + platform
       from {
           (configurations.compile + files("lib/swt-${platform}.jar") + files(moreJars))
                   .collect { it.isDirectory() ? it : zipTree(it) } +
           moreLibs
       }
       exclude(
           'version.txt',
           'images/**/*.svg',
           'chrome.manifest',
           'swt.js',
           'swt.xpt',
           // GTK stuff
           'libswt-awt-gtk-*.so',
           'libswt-glx-gtk-*.so',
           'libswt-mozilla-*.so',
           'libswt-gnome-*.so',
           'libswt-xpcominit-gtk-*.so',
           'libswt-xulrunner-*.so',
           'libswt-webkit-gtk-*.so',
           // Win32 stuff
           'swt-awt-*.dll',
           'swt-wgl-*.dll',
           'swt-gdip-*.dll',
           'swt-xpcominit-*.dll',
           'swt-xulrunner-*.dll',
           'swt-webkit-*.dll',
           // Mac stuff
           'libswt-awt-*.jnilib',
           'libswt-xulrunner-*.jnilib',
           // swt classes
           'org/eclipse/swt/dnd/D*',
           'org/eclipse/swt/dnd/H*',
           'org/eclipse/swt/dnd/F*',
           'org/eclipse/swt/dnd/N*',
           'org/eclipse/swt/dnd/R*',
           'org/eclipse/swt/dnd/S*',
           'org/eclipse/swt/dnd/Table*',
           'org/eclipse/swt/dnd/Tree*',
           'org/eclipse/swt/browser/**',
           'org/eclipse/swt/ole/**',
           'org/eclipse/swt/opengl/**',
           'org/eclipse/swt/internal/opengl/**',
           'org/eclipse/swt/internal/cde/**',
           'org/eclipse/swt/internal/theme/**',
           'org/eclipse/swt/internal/mozilla/**',
           'org/eclipse/swt/internal/webkit/**',
           'org/eclipse/swt/internal/gnome/**',
           'org/eclipse/swt/internal/image/JPEG*',
           'org/eclipse/swt/internal/image/OS2*',
           'org/eclipse/swt/internal/image/GIF*',
           'org/eclipse/swt/internal/image/LZW*',
           'org/eclipse/swt/internal/image/TIFF*',
           'org/eclipse/swt/internal/image/Win*',
           'org/eclipse/swt/custom/**',
           'org/eclipse/swt/awt/**'
       )
       with jar
    }
}

packageTask('linux', [], 'ext/rocksaw/lib/linux/librocksaw.so')
packageTask('linux64', [], 'ext/rocksaw/lib/linux64/librocksaw64.so')
packageTask('win32', 'lib/jna-win32.jar', 'ext/rocksaw/lib/rocksaw.dll')
packageTask('win64', 'lib/jna-win64.jar', [])
packageTask('mac', [], [])

task all(dependsOn: ['linux', 'linux64', 'win32', 'win64', 'mac'])

task info {
    doLast {
        println "This script will build ${project.name} ${version}"
        println 'Targets (some may work only on Linux):'
        println '  all           - runs tests and builds binaries for all OSs'
        println '  linux         - builds only Linux 32-bit binary'
        println '  linux64       - builds only Linux 64-bit binary'
        println '  mac           - builds only Mac binary'
        println '  win32         - builds only Windows binary'
        println '  win64         - builds only Windows 64-bit binary'
        println '  win-installer - packages a Windows installer (including both 32 and 64-bit binaries)'
    }
}

defaultTasks 'info'
